generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearch"]
  // binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  // output          = "prisma/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  userId String @map("user")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum AppControlType {
  VOTING_ENABLED
  QUESTION
  EMBED
  IMAGE
}

model AppControl {
  id          String         @id @default(cuid())
  controlType AppControlType
  details     Json
  isActive    Boolean        @default(false)
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  dateCreated  DateTime?     @default(now())
  dateModified DateTime?     @updatedAt
  votes        Vote[]
  entries      UserEntries[]
  AdminUser    AdminUser[]
}

model UserEntries {
  id      String @id @default(cuid())
  userId  String @map("user")
  entryId String @map("entry")
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  entry   Entry  @relation(fields: [entryId], references: [id], onDelete: Cascade)
}

model Entry {
  id          String        @id @default(cuid())
  title       String        @db.VarChar
  description String        @db.VarChar
  imageUrl    String        @default("")
  Votes       Vote[]
  members     String
  UserEntries UserEntries[]
}

enum VotingType {
  COMMITTEE_VOTES
  DISTRIBUTE_VOTES
  SINGLE_VOTE
}

model Prize {
  id                  String     @id @default(cuid())
  name                String
  description         String     @default("")
  autoRelease         Boolean    @default(true)
  numDisplayedEntries Int        @default(7)
  color               String     @default("#ffd800")
  imageUrl            String     @default("")
  details             Json?
  votingType          VotingType
  Vote                Vote[]
}

model Vote {
  id          String    @id @default(cuid())
  prizeId     String    @map("prize")
  userId      String    @map("user")
  entryId     String    @map("entry")
  numVotes    Int       @default(0)
  isReleased  Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  entry       Entry     @relation(fields: [entryId], references: [id], onDelete: Cascade)
  prize       Prize     @relation(fields: [prizeId], references: [id], onDelete: Cascade)
  dateCreated DateTime? @default(now())

  @@unique([userId, entryId, prizeId])
}
